function geneticAlgorithm(ITERATIONS,CHROMOSOMES,PERCMUTATIONS)
% Реалізація генетичного алгортиму
% Передається кількість ітерацій
% По виконанні операцій кросоверу та мутації вибирається найкращий фітнес і
% зберігається у окремій змінній (історія функцій фітнесу) разом із
% хромосомою, що дала найкращий фітнес; якщо таких хромосом кілька -
% вибирається перша із них
% Аргументи: ITERATIONS    - кількість ітерацій ГА
%            CHROMOSOMES   - кількість хромосом
%            PERCMUTATIONS - відсоток мутацій із кількості хромосом
%            IM            - матриця інцидентностей (глобальна змінна)
% Проміжні результати зберігаються у змінних CH та CHF (глобальні)
% Результат: GAResult      - значення фітнесів та хромосом з найкращим
%                            фітнесом для кожної ітерації
%            GABestResult  - значення найкращого фітнесу і хромосоми, що його дала

% створюємо потрібну кількість хромосом
getChromosomes(CHROMOSOMES);
% визначаємо кількість та довжину хромосом
global CH;
global CHF;
[m,n]=size(CH);
% створюємо змінну для зберігання результату
global GAResult;
GAResult=zeros(ITERATIONS,n+1);
global GABestResult;
% визначаємо найркащий фітнес
I=find(CHF==max(CHF));
% зберігаємо значення фітнесу та відповідної хромосоми у GAResult
GAResult(1,:)=[CHF(I(1,1),1) CH(I(1,1),:)];
GABestResult=GAResult(1,:);
% виконуємо ITERATIONS-1 ітерацій ГА
for i=2:ITERATIONS
    % виконуємо кросовер
    doCrossover;
    % виконуємо мутацію
    doMutation(PERCMUTATIONS);
    % вибираємо хромосому з найкращим фітнесом та зберігаємо у масиві результату
    I=find(CHF==max(CHF));
    GAResult(i,:)=[CHF(I(1,1),1) CH(I(1,1),:)];
    % якщо отримано краще значення фітнесу - зберігаємо його
    if GAResult(i,1)>GABestResult(1,1)
        GABestResult=GAResult(i,:);
    end
end
    