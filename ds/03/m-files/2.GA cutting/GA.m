function [GAResult,GABestResult,CH,CHF]=GA(ITERATIONS,CH,CHF,PERCMUTATIONS,PLATES,PLATE)
% Реалізація генетичного алгортиму
% Передається кількість ітерацій
% По виконанні операцій кросоверу та мутації вибирається найкращий фітнес і
% зберігається у окремій змінній (історія функцій фітнесу) разом із
% хромосомою, що дала найкращий фітнес; якщо таких хромосом кілька -
% вибирається перша із них
% Аргументи: ITERATIONS    - кількість ітерацій ГА
%            CH            - хромосоми
%            CHF           - значення функції фітнесу для хромосом
%            PERCMUTATIONS - кількість мутацій
%            PLATES        - матриця пластинок у вигляді рядків пар (довжина;ширина)
%            PLATE         - розміри великої пластини
% Проміжні результати зберігаються у змінних CH та CHF
% Результат: GAResult      - значення фітнесів та хромосом з найкращим
%                            фітнесом для кожної ітерації
%            GABestResult  - значення найкращого фітнесу і хромосоми, що його дала
%            CH            - хромосоми
%            CHF           - значення фітнесу

% визначаємо кількість та довжину хромосом
[m,n]=size(CH);

% створюємо змінну для зберігання результату
GAResult=zeros(ITERATIONS,n+1);
% визначаємо найркащий фітнес
I=find(CHF==min(CHF));
% зберігаємо значення фітнесу та відповідної хромосоми у GAResult
GAResult(1,:)=[CHF(I(1,1),1) CH(I(1,1),:)];
GABestResult=GAResult(1,:);
% виконуємо ITERATIONS-1 ітерацій ГА
for i=1:ITERATIONS
    % виконуємо кросовер
    [CH,CHF]=doCrossover(CH,CHF,PLATE);
%    disp 'Crossover'
    % виконуємо мутацію
    [CH,CHF]=doMutation(CH,CHF,PLATE,0,PERCMUTATIONS);
%    disp 'Mutation'
    % вибираємо хромосому з найкращим фітнесом та зберігаємо у масиві результату
    I=find(CHF==min(CHF));
    GAResult(i,:)=[CHF(I(1,1),1) CH(I(1,1),:)];
    % якщо отримано краще значення фітнесу - зберігаємо його
    if GAResult(i,1)<GABestResult(1,1)
        GABestResult=GAResult(i,:);
    end
%    i
end
    