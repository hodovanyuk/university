function d2d2(nodes_of_element);

% проверяем, есть ли узлы на границе

for i:=1:3;
    flag_of_boundary(i)=0;
    for j=1:number_of_boundary_nodes
        if boundary_nodes(j)==nodes(i)
            flag_of_boundary(i)=1;
        end
    end
end

% выбираем координаты вершин

for i=1:3
  for j=1:2
    nodes(i,j)=points(nodes_of_element,j);
  end
end

% площадь элемента

s=Area(nodes);

% находим уравнения трех базисных плоскостей

coeff_of_planes(1,1)=1; coeff_of_planes(1,2)=nodes(1,1); coeff_of_planes(1,3)=nodes(1,2);
coeff_of_planes(2,1)=1; coeff_of_planes(2,2)=nodes(2,1); coeff_of_planes(2,3)=nodes(2,2);
coeff_of_planes(3,1)=1; coeff_of_planes(3,2)=nodes(3,1); coeff_of_planes(3,3)=nodes(3,2);
coeff_of_planes=inverse(coeff_of_planes);

for ind_of_line=1:3
    line=nodes_of_element(ind_of_line);

    % не на границе ли узловая точка
    
    if flag_of_boundary(line)==0
       for ind_of_column=1:3  
          
           column=nodes_of_element(ind_of_line);
           
           % не на границе ли узловая точка      
           
           if flag_of_boundary(column)==0
          
              integral=-s*coeff_of_planes(ind_of_line,2)*coeff_of_planes(ind_of_column,2);
              global_matrix(line,column)=global_matrix(line,column)+integral;
             
              integral=-s*coeff_of_planes(ind_of_line,1)*coeff_of_planes(ind_of_column,1);
              global_matrix(line,column)=global_matrix(line,column)+integral;
              
          end  
       end
   end
end
    


