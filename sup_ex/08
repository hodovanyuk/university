// a25

int x, y, z;
x = 03; y = 02; z = 01;
printf("%d\n", x | y & z);
printf("%d\n", x | y & ~z);
printf("%d\n", x ^ y & ~z);
printf("%d\n", x & y && z);

output:

3
3
1
1

toer:

binary operation order

http://en.cppreference.com/w/c/language/operator_precedence

& bitwise and
^ bitwise xor
| bitwise or
&& logical and

logical return 1 or 0, bitwise return bit

// a26

task:


int x,y;
x = 1; y = -1;
printf("%d\n", !x | x);
printf("%d\n", ~x | x);
printf("%d\n", x ^ x);

output:

1
-1
0

teor:

! logical NOT
~ bitwise NOT

// a27

task:

int x, y, z;
x = y = z = -1;
++x && ++y || ++z; printf("x=%d\ty=%d\tz=%d\n", x, y, z);
x = y = z = -1;
++x || ++y && ++z; printf("x=%d\ty=%d\tz=%d\n", x, y, z);
x = y = z = -1;
++x && ++y && ++z; printf("x=%d\ty=%d\tz=%d\n", x, y, z);

output:

0 -1 0
0 0 -1
0 -1 -1

teor:

A && B -> if A==0 -> dont care what in B

// a28

task:

int a[] = {0, 1, 2, 3, 4};
int main()
{
 int i, *p;
 for (p = a, i = 0; p + i <= a + 4; p++, i++)
 printf("%d\n", *(p+i));

output:

0
2
4

teor:

pointer a look at array start (0) => a+4 = 4
p++ => step forwar in array

// a29

task:

int a[3][3] = {{1, 2, 3},
 {4, 5, 6},
 {7, 8, 9}};
int main()
{
 int i;
 for (i = 0; i < 3; i++)
 printf("%d %d\n", *a[i], *(*(a+i)+i));

output:

1 1
4 5
7 9

teor:

*a[i] => look at row start,
*(*(a+i)+i) => diagonal

// a30

task:

10{16} + 10{8} * 10{2}
10{16} => 16{10} => 1010
10{8} => 8{10} => 1001
10{2} => 2{10} => 10

output:

32{10} => 100000

1010 10
11010 26
100000 32
110000 48

teor:

http://www.wikihow.com/Convert-from-Decimal-to-Binary

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

//

task:

output:

teor:

