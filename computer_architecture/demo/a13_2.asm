; Пример 13.2. Оптимизированная процедура преобразования двоичного числа
; в символьную форму

.386
text    segment use16           ; начало сегмента команд
assume  CS:text,DS:data

begin:  mov AX,data             ; инициализация сегментного
        mov DS,AX               ;    регистра DS

        mov AX,16385            ;(1) преобразуемое число
        mov SI,offset string    ;(2) адрес результата
        call wrd_asc            ;(3) вызов подпрограммы wrd_asc

        mov AH,09h              ;(4) функция вывода на экран
        mov DX,offset string    ;(5)
        int 21h                 ;(6) вызов DOS

; завершим программу
        mov AX,4C00h
        int 21h

; подпрограмма преобразования слова
; при вызове преобразуемое число в АХ,
; DS:SI = адрес поля для результата
wrd_asc proc                    ;(1)
        pusha                   ;(2) сохраним все регистры
        mov BX,0F000h           ;(3) в ВХ будет маска битов
        mov DL,12               ;(4) в DL будет число сдвигов АХ
        mov CX,4                ;(5) счетчик цикла
cccc:   push CX                 ;(6) сохраним его
        push AX                 ;(7) сохраним исходное число в стеке
        and AX,BX               ;(8) выделим четверку битов
        mov CL,DL               ;(9) отправим в CL число сдвигов
        shr AX,CL               ;(10) сдвинем на CL бит вправо
        call bin_asc            ;(11) преобразуем в символ ASCII
        mov byte ptr [SI],AL    ;(12) отправим в строку результата
        inc SI                  ;(13) сдвинемся по строке вправо
        pop AX                  ;(14) вернем в АХ исходное число
        shr BX,4                ;(15) модифицируем маску битов
        sub DL,4                ;(16) модифицируем число сдвигов
        pop CX                  ;(18) восстановим счетчик цикла
        loop cccc               ;(19) цикл
        popa                    ;(20) восстановим все регистры
        ret                     ;(21) возврат из подпрограммы
wrd_asc endp                    ;(22)

; подпрограмма преобразования 16-ричной цифры
; преобразуемая четверка битов в младшей половине AL,
; результат в AL
bin_asc proc                    ;(39) начало процедуры
        cmp AL,9                ;(40) цифра > 9
        ja lettr                ;(41) да, на преобразование в букву
        add AL,30h              ;(42) нет, преобразуем в символ 0..9
        jmp ok                  ;(43) и на выход из подпрограммы
lettr:  add AL,37h              ;(44) преобразуем в символ A..F
ok:     ret                     ;(45) возврат в вызывающую процедуру
bin_asc endp                    ;(46) конец процедуры

text    ends                    ; конец сегмента команд

data    segment use16           ; начало сегмента данных
string  db 4 dup ('?'),'h$'     ;(47)
data    ends                    ;(22) конец сегмента данных

stk     segment stack use16     ;(23) начало сегмента стека
        db 256 dup (0)          ;(24) стек
stk     ends                    ;(25) конец сегмента стека

end begin                       ;(26) конец текста программы
